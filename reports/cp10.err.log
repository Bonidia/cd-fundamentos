Traceback (most recent call last):
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/home/bonidia/miniconda3/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/bonidia/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Importando Bibliotecas necessÃ¡rias
import numpy as np
import pandas as pd
import collections
from Bio import SeqIO
from itertools import product


def janela_deslizante(seq, janela):
    seqlen = len(seq)
    for i in range(seqlen):
        j = seqlen if i+janela>seqlen else i+janela
        yield seq[i:j]
        if j==seqlen: break
    return


def k_possiveis(tamanho_k, tipo_seq):
    k_possiveis = [''.join(str(i) for i in x) for x in product(tipo_seq, repeat=tamanho_k)]
    dados_estruturados = pd.DataFrame(columns=range(len(k_possiveis)))
    dados_estruturados.columns = k_possiveis

    kmer = {}
    for k in k_possiveis:
        kmer[k] = 0
    kmer = collections.OrderedDict(sorted(kmer.items()))
    return dados_estruturados, kmer


def kmers(entrada, tamanho_k, tipo_seq):
    
    dados_estruturados, kmer = k_possiveis(tamanho_k, tipo_seq)
   
    for seq_record in SeqIO.parse(entrada, "fasta"):
        seq = seq_record.seq
        seq = seq.upper()   

        for subseq in janela_deslizante(seq, tamanho_k):
            try:
              kmer[subseq] = kmer[subseq] + 1
            except:
              pass 

        dados_estruturados = dados_estruturados.append(kmer, ignore_index=True)
        kmer = dict.fromkeys(kmer, 0)
    return dados_estruturados
    
    
dna = ['A', 'C', 'G', 'T']
rna = ['A', 'C', 'G', 'U']
protein = ['A', 'C', 'D', 'E', 'F', 
           'G', 'H', 'I', 'K', 'L', 
           'M', 'N', 'P', 'Q', 'R', 
           'S', 'T', 'V', 'W', 'Y']

pos_estruturado = kmers('positivo.fasta', 1, protein)
print(pos_estruturado)

neg_estruturado = kmers('negativo.fasta', 1, protein)
print(neg_estruturado)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 2[0m
[1;32m      1[0m [38;5;66;03m# Importando Bibliotecas necessÃ¡rias[39;00m
[0;32m----> 2[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mnp[39;00m
[1;32m      3[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mpandas[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpd[39;00m
[1;32m      4[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mcollections[39;00m

[0;31mModuleNotFoundError[0m: No module named 'numpy'

